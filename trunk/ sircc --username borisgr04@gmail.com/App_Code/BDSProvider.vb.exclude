Imports System.Data
Imports System.Data.Common
Imports System.Configuration
'Imports Npgsql
Public MustInherit Class BDSProvider
    Protected Shared _Conexion As DbConnection = Nothing
    Protected _Comando As DbCommand = Nothing
    Protected _Transaccion As DbTransaction = Nothing
    Protected _CadenaConexion As String
    Protected Shared _Factory As DbProviderFactory = Nothing
    '''
    ''' Crea una instancia del acceso a la base de datos.
    '''
    ''' proveedor de base de datos.
    ''' cadena de conexion.
    '''
    Public Sub New(ByVal prov As String, ByVal cad As String)
        Configurar(prov, cad)
    End Sub
    Public Sub New(ByVal CntStr As String)
        Configurar(CntStr)
    End Sub
    '''
    ''' Configura el acceso a la base de datos para su utilización.
    '''
    ''' Si existe un error al cargar la configuración.
    ''' es el nombre de la variable del proveedor de base de datos del archivo de configuracion
    ''' es el nombre de la variable de la cadena de conexion del archivo de configuracion
    Protected Sub Configurar(ByRef prov As String, ByRef cadena As String)
        Try
            Dim proveedor As String = prov 'ConfigurationManager.AppSettings.Get(prov)
            'Me._CadenaConexion = ConfigurationManager.AppSettings.Get(cadena)
            'Me._CadenaConexion = "Server=localhost;Port=5432;User Id=postgres;Password=12345;Database=Cartera;"
            Me._CadenaConexion = cadena
            'Me._CadenaConexion = "Server=localhost;Port=5432;User Id=postgres;Password=12345;Database=postgres;"

            'BDProvider._Factory = DbProviderFactories.GetFactory("Npgsql")
            BDSProvider._Factory = DbProviderFactories.GetFactory(proveedor)
        Catch ex As ConfigurationErrorsException
            'Throw New BaseDatosException("Error al cargar la configuración del acceso a datos.", ex)
        End Try
    End Sub
    Protected Sub Configurar(ByRef CntStr As String)
        Try
            Dim proveedor As String = ConfigurationManager.ConnectionStrings(CntStr).ProviderName
            'Me._CadenaConexion = ConfigurationManager.AppSettings.Get(cadena)
            'Me._CadenaConexion = "Server=localhost;Port=5432;User Id=postgres;Password=12345;Database=Cartera;"
            Me._CadenaConexion = ConfigurationManager.ConnectionStrings(CntStr).ConnectionString
            'Me._CadenaConexion = "Server=localhost;Port=5432;User Id=postgres;Password=12345;Database=postgres;"

            'BDProvider._Factory = DbProviderFactories.GetFactory("Npgsql")
            BDSProvider._Factory = DbProviderFactories.GetFactory(proveedor)
        Catch ex As ConfigurationErrorsException
            'Throw New BaseDatosException("Error al cargar la configuración del acceso a datos.", ex)
        End Try
    End Sub
    '''
    ''' Permite desconectarse de la base de datos.
    '''
    Public Sub Desconectar()
        If BDSProvider._Conexion.State.Equals(ConnectionState.Open) Then
            'BDSProvider._Conexion.Dispose()
            BDSProvider._Conexion.Close()
        End If
    End Sub
    '''
    ''' Se concecta con la base de datos.
    '''
    ''' Si existe un error al conectarse.
    Public Sub Conectar()

        If Not BDSProvider._Conexion Is Nothing Then
            If BDSProvider._Conexion.State.Equals(ConnectionState.Closed) Then
                'Me.Desconectar()
                'Throw New BaseDatosException("La conexión ya se encuentra abierta.")
                'Me.Desconectar()
                Exit Sub
            End If
        End If
        Try
            If BDSProvider._Conexion Is Nothing Then
                BDSProvider._Conexion = _Factory.CreateConnection()
                BDSProvider._Conexion.ConnectionString = _CadenaConexion
            End If
            BDSProvider._Conexion.Open()
        Catch ex As DataException
            Throw New BaseDatosException("Error al conectarse.")
        End Try
    End Sub
    '''
    ''' Crea un comando en base a una sentencia SQL.Ejemplo:
    ''' SELECT * FROM Tabla WHERE campo1=@campo1, campo2=@campo2
    ''' Guarda el comando para el seteo de parámetros y la posterior ejecución.
    '''
    ''' La sentencia SQL con el formato: SENTENCIA [param = @param,]
    Public Sub CrearComando(ByVal sentenciaSQL As String)
        Me._Comando = _Factory.CreateCommand()
        Me._Comando.Connection = BDSProvider._Conexion
        Me._Comando.CommandType = CommandType.Text
        Me._Comando.CommandText = sentenciaSQL
        If Not Me._Transaccion Is Nothing Then
            Me._Comando.Transaction = Me._Transaccion
        End If
    End Sub
    '''
    ''' Crea un comando en base a una sentencia SQL.Ejemplo:
    ''' SELECT * FROM Tabla WHERE campo1=@campo1, campo2=@campo2
    ''' Guarda el comando para el seteo de parámetros y la posterior ejecución.
    '''
    ''' La sentencia SQL con el formato: SENTENCIA [param = @param,]
    Public Sub CrearComando(ByVal sentenciaSQL As String, ByVal Tipo As CommandType)
        Me._Comando = _Factory.CreateCommand()
        Me._Comando.Connection = BDSProvider._Conexion
        Me._Comando.CommandType = Tipo
        Me._Comando.CommandText = sentenciaSQL
        If Not Me._Transaccion Is Nothing Then
            Me._Comando.Transaction = Me._Transaccion
        End If
    End Sub
    '''
    ''' Crea un comando en base a una sentencia SQL.Ejemplo:
    ''' SELECT * FROM Tabla WHERE campo1=@campo1, campo2=@campo2
    ''' Guarda el comando para el seteo de parámetros y la posterior ejecución.
    '''
    ''' La sentencia SQL con el formato: SENTENCIA [param = @param,]
    Public Sub AgregarParametro(ByVal Par As BDParametros)
        Me._Comando.Parameters.Add(Par)
    End Sub

    '''
    ''' Setea un parámetro como nulo del comando creado.
    '''
    ''' El nombre del parámetro cuyo valor será nulo.
    Public Sub AsignarParametroNulo(ByVal nombre As String)
        AsignarParametro(nombre, "", "NULL")
    End Sub
    Public Sub AsignarParametroImagen()
    End Sub
    '''
    ''' Asigna un parámetro de tipo cadena al comando creado.
    '''
    ''' El nombre del parámetro.
    ''' El valor del parámetro.
    Public Sub AsignarParametroCadena(ByVal nombre As String, ByVal valor As String)
        AsignarParametro(nombre, "'", valor)
    End Sub
    '''
    ''' Asigna un parámetro de tipo entero al comando creado.
    '''
    ''' El nombre del parámetro.
    ''' El valor del parámetro.
    Public Sub AsignarParametroEntero(ByVal nombre As String, ByVal valor As Integer)
        AsignarParametro(nombre, "", valor.ToString())
    End Sub
    Public Sub AsignarParametroBooleano(ByVal nombre As String, ByVal valor As Boolean)
        AsignarParametro(nombre, "", valor.ToString)
    End Sub
    Public Sub AsignarParametroDecimal(ByVal nombre As String, ByVal valor As Decimal)
        AsignarParametro(nombre, "", valor.ToString)
    End Sub
    Public Sub AsignarCualquierParametro(ByVal nombre As String, ByVal valor As Object)
        AsignarParametro(nombre, "", valor.ToString)
    End Sub
    Public Sub AsignarParametroByte(ByVal nombre As String, ByVal valor() As Byte)
        '     Dim pa As New Npgsql.NpgsqlParameter(nombre, NpgsqlTypes.NpgsqlDbType.Bytea, valor.Length)
        '     pa.Value = valor
        '    Me._Comando.Parameters.Add(pa)
    End Sub
    '''
    ''' Ejecuta la Consulta y lo devuelve en un DataSet
    '''
    Public Function EjecutarConsultaDataSet() As DataSet
        Dim dsResult As New DataSet
        'Dim adapter As NpgsqlDataAdapter = New NpgsqlDataAdapter(Me._Comando.CommandText, Me._Conexion)
        'Dim customers As DataSet = New DataSet
        'adapter.Fill(dsResult, "Tabla1")
        Return dsResult
    End Function
    '''
    ''' Ejecuta la Consulta y lo devuelve en un Datatable
    '''
    Public Function EjecutarConsultaDataTable() As DataTable
        Dim dsResult As New DataSet
        'Dim adapter As NpgsqlDataAdapter = New NpgsqlDataAdapter(Me._Comando.CommandText, Me._Conexion)
        'Dim customers As DataSet = New DataSet
        'adapter.Fill(dsResult, "Tabla1")
        Return dsResult.Tables(0)
    End Function

    '''
    ''' Asigna un parámetro al comando creado.
    '''
    ''' El nombre del parámetro.
    ''' El separador que será agregado al valor del parámetro.
    ''' El valor del parámetro.
    Private Sub AsignarParametro(ByVal nombre As String, ByVal separador As String, ByVal valor As String)
        Dim indice As Integer = Me._Comando.CommandText.IndexOf(nombre)
        Dim prefijo As String = Me._Comando.CommandText.Substring(0, indice)
        Dim sufijo As String = Me._Comando.CommandText.Substring(indice + nombre.Length)
        Me._Comando.CommandText = prefijo + separador + valor + separador + sufijo
    End Sub
    '''
    ''' Asigna un parámetro de tipo fecha al comando creado.
    '''
    ''' El nombre del parámetro.
    ''' El valor del parámetro.
    Public Sub AsignarParametroFecha(ByVal nombre As String, ByVal valor As DateTime)
        AsignarParametro(nombre, "'", valor)
    End Sub
    '''
    ''' Ejecuta el comando creado y retorna el resultado de la consulta.
    '''
    ''' El resultado de la consulta.
    ''' Si ocurre un error al ejecutar el comando.
    Public Function EjecutarConsulta() As DbDataReader
        Return Me._Comando.ExecuteReader()
    End Function
    '''
    ''' Ejecuta el comando creado y retorna un escalar.
    '''
    ''' El escalar que es el resultado del comando.
    ''' Si ocurre un error al ejecutar el comando.
    Public Function EjecutarEscalar() As Integer
        Dim escalar As Integer = 0
        Try
            escalar = Integer.Parse(Me._Comando.ExecuteScalar().ToString())
        Catch ex As InvalidCastException
            Throw New BaseDatosException("Error al ejecutar un escalar.", ex)
        End Try
        Return escalar
    End Function
    '''
    ''' Ejecuta el comando creado.
    '''
    Public Function EjecutarComando() As Integer
        Return Me._Comando.ExecuteNonQuery()
    End Function
    '''
    ''' Comienza una transacción en base a la conexion abierta.
    ''' Todo lo que se ejecute luego de esta ionvocación estará
    ''' dentro de una tranasacción.
    '''
    Public Sub ComenzarTransaccion()
        If Me._Transaccion Is Nothing Then
            Me._Transaccion = BDSProvider._Conexion.BeginTransaction()
        End If
    End Sub
    '''
    ''' Cancela la ejecución de una transacción.
    ''' Todo lo ejecutado entre ésta invocación y su
    ''' correspondiente ComenzarTransaccion será perdido.
    '''
    '''
    Public Sub CancelarTransaccion()
        If Not Me._Transaccion Is Nothing Then
            Me._Transaccion.Rollback()
        End If
    End Sub
    '''
    ''' Confirma todo los comandos ejecutados entre el ComanzarTransaccion
    ''' y ésta invocación.
    '''
    Public Sub ConfirmarTransaccion()
        If Not Me._Transaccion Is Nothing Then
            Me._Transaccion.Commit()
        End If
    End Sub
End Class
